"use client";

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useToast } from '../../components/Toast';
import { apiCall } from '../../utils/api';

interface Forecast {
  id: number;
  productId: number;
  productName: string;
  currentStock: number;
  forecastDate: string;
  predictedDemand: number;
  confidenceLevel: number;
  forecastType: string;
  algorithm: string;
  historicalDataPoints: number;
  createdAt: string;
}

interface Product {
  id: number;
  name: string;
  stock: number;
}

export default function ForecastingPage() {
  const { addToast } = useToast();
  const [forecasts, setForecasts] = useState<Forecast[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<number | null>(null);
  const [selectedAlgorithm, setSelectedAlgorithm] = useState('moving_average');
  const [authChecked, setAuthChecked] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const router = useRouter();
  const searchParams = useSearchParams();

  // Auth check
  useEffect(() => {
    const token = sessionStorage.getItem("admin_jwt");
    if (!token) {
      router.replace("/admin/login");
      return;
    }
    apiCall("/api/auth/profile", {
      headers: { Authorization: `Bearer ${token}` }
    })
      .then(res => res.json())
      .then(data => {
        if (!data.user || data.user.role !== "admin") {
          sessionStorage.removeItem("admin_jwt");
          router.replace("/admin/login");
        } else {
          setAuthChecked(true);
        }
      })
      .catch(() => {
        sessionStorage.removeItem("admin_jwt");
        router.replace("/admin/login");
      });
  }, []);

  useEffect(() => {
    if (authChecked) {
      fetchProducts();
      fetchForecasts();
    }
  }, [authChecked]);

  // Auto-select product from URL and generate forecast
  useEffect(() => {
    if (authChecked && products.length > 0 && !autoGenerated) {
      const productId = searchParams.get('product');
      if (productId) {
        const productIdNum = parseInt(productId);
        setSelectedProduct(productIdNum);
        setAutoGenerated(true);
        // Auto-generate forecast after a short delay
        setTimeout(() => {
          setSelectedProduct(productIdNum);
          generateForecast();
        }, 500);
      }
    }
  }, [authChecked, products, autoGenerated, searchParams]);

  const fetchProducts = async () => {
    try {
      const response = await apiCall('/api/products');
      if (response.ok) {
        const data = await response.json();
        setProducts(data.products);
      }
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };

  const fetchForecasts = async () => {
    try {
      const token = sessionStorage.getItem("admin_jwt");
      const response = await apiCall('/api/forecasting/dashboard', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setForecasts(data.latestForecasts || []);
      }
    } catch (error) {
      console.error('Error fetching forecasts:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateForecast = async () => {
    if (!selectedProduct) {
      addToast({
        type: 'error',
        title: 'Error',
        message: 'Please select a product first.'
      });
      return;
    }

    setGenerating(true);
    try {
      const token = sessionStorage.getItem("admin_jwt");
      const response = await apiCall(`/api/forecasting/generate/${selectedProduct}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          algorithm: selectedAlgorithm,
          days: 30
        })
      });

      if (response.ok) {
        const data = await response.json();
        addToast({
          type: 'success',
          title: 'Forecast Generated',
          message: `Forecast for ${data.forecast.productName}: ${data.forecast.predictedDemand} units/day`
        });
        fetchForecasts(); // Refresh the list
      } else {
        const error = await response.json();
        addToast({
          type: 'error',
          title: 'Error',
          message: error.error || 'Failed to generate forecast'
        });
      }
    } catch (error) {
      addToast({
        type: 'error',
        title: 'Error',
        message: 'Failed to generate forecast'
      });
    } finally {
      setGenerating(false);
    }
  };

  const getRecommendationColor = (currentStock: number, predictedDemand: number) => {
    if (predictedDemand === 0) return 'text-gray-600';
    const daysUntilStockout = currentStock / predictedDemand;
    if (daysUntilStockout <= 7) return 'text-red-600';
    if (daysUntilStockout <= 14) return 'text-orange-600';
    if (daysUntilStockout <= 30) return 'text-yellow-600';
    return 'text-green-600';
  };

  const getRecommendation = (currentStock: number, predictedDemand: number) => {
    if (predictedDemand === 0) return 'No demand predicted';
    const daysUntilStockout = currentStock / predictedDemand;
    if (daysUntilStockout <= 7) return `URGENT: Restock immediately (~${Math.round(daysUntilStockout)} days)`;
    if (daysUntilStockout <= 14) return `Restock soon (~${Math.round(daysUntilStockout)} days)`;
    if (daysUntilStockout <= 30) return `Monitor levels (~${Math.round(daysUntilStockout)} days)`;
    return `Healthy stock (~${Math.round(daysUntilStockout)} days)`;
  };

  if (!authChecked) return null;

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Inventory Forecasting</h1>
          <p className="text-gray-600">Predict demand and optimize inventory levels</p>
        </div>

        {/* Generate Forecast Section - Only show if no product is auto-selected */}
        {!searchParams.get('product') && (
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <h2 className="text-xl font-semibold mb-4">Generate New Forecast</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Select Product
                </label>
                <select
                  value={selectedProduct || ''}
                  onChange={(e) => setSelectedProduct(Number(e.target.value) || null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Choose a product...</option>
                  {products.map(product => (
                    <option key={product.id} value={product.id}>
                      {product.name} (Stock: {product.stock})
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Algorithm
                </label>
                <select
                  value={selectedAlgorithm}
                  onChange={(e) => setSelectedAlgorithm(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="moving_average">Moving Average (7-day)</option>
                  <option value="linear_trend">Linear Trend</option>
                  <option value="seasonal">Seasonal Pattern</option>
                </select>
              </div>
              <div className="flex items-end">
                <button
                  onClick={generateForecast}
                  disabled={!selectedProduct || generating}
                  className="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {generating ? 'Generating...' : 'Generate Forecast'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Show selected product info when auto-selected */}
        {searchParams.get('product') && selectedProduct && (
          <div className="bg-white rounded-lg shadow p-6 mb-8">
            <h2 className="text-xl font-semibold mb-4">Forecast for {products.find(p => p.id === selectedProduct)?.name}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Algorithm
                </label>
                <select
                  value={selectedAlgorithm}
                  onChange={(e) => setSelectedAlgorithm(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="moving_average">Moving Average (7-day)</option>
                  <option value="linear_trend">Linear Trend</option>
                  <option value="seasonal">Seasonal Pattern</option>
                </select>
              </div>
              <div className="flex items-end">
                <button
                  onClick={generateForecast}
                  disabled={generating}
                  className="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {generating ? 'Generating...' : 'Generate New Forecast'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Forecasts List */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold">Latest Forecasts</h2>
          </div>
          
          {loading ? (
            <div className="p-6 text-center">
              <div className="text-gray-500">Loading forecasts...</div>
            </div>
          ) : forecasts.length === 0 ? (
            <div className="p-6 text-center">
              <div className="text-gray-500 mb-4">No forecasts generated yet.</div>
              <p className="text-sm text-gray-400">Generate your first forecast to see predictions and recommendations.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Product
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Current Stock
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Predicted Demand
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Confidence
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Algorithm
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Recommendation
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {forecasts.map((forecast) => (
                    <tr key={forecast.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {forecast.productName}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{forecast.currentStock}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {forecast.predictedDemand} units/day
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {Math.round(forecast.confidenceLevel * 100)}%
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{forecast.algorithm}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className={`text-sm font-medium ${getRecommendationColor(forecast.currentStock, forecast.predictedDemand)}`}>
                          {getRecommendation(forecast.currentStock, forecast.predictedDemand)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {new Date(forecast.createdAt).toLocaleDateString()}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 